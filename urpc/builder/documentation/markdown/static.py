def get_static_part():
    s = ("""
    ## Описание протокола

    Управление контроллером с ПК происходит по интерфейсу последовательного порта (COM-порт). На стороне контроллера
    жёстко установлены следующие параметры COM-порта:

    * Скорость – 115200 бод;
    * Длина кадра – 8 бит;
    * Стоп-биты – 2 бита;
    * Чётность – нет.
    * Контроль потока – нет(Xon/Xoff, CTS/RTS не используются).
    * Таймаут на получение, между байтами одного пакета – 400 мсек.
    * Порядок следования бит – LittleEndian.
    * Многобайтовые типы данных передаются младшим байтом вперёд.

    ## Исполнение команд

    Базовый принцип протокола - "Запрос-Ответ", причём все обмены данными инициируются ПК, т.е. ПК посылает команды в \
    контроллер, но не наоборот. Каждая команда подразумевает получение ответа от контроллера (кроме редких случаев \
    специальных команд), т.е. нельзя послать несколько команд подряд, без ожидания ответа на них.

    Все команды делятся на сервисные, штатные управляющие и штатные информационные.

    Команды выполняются сразу после их поступления в контроллер. Установленные командой SХХХ параметры начинают влиять \
    на текущее движение в течение 1 мс после установки.

    Обработка команды не влияет на своевременность выполнения контроллером действий связанных с оперативным управление \
    и контролем двигателя (работа ШИМ, взаимодействие с энкодером и т.п.).

    И контроллер и ПК обладают буфером обмена. Принятые команды и данные, в случае их наличия в команде, \
    обрабатываются один раз. То есть, после обработки эти данные удаляются из буфера и обрабатываются уже новые \
    пришедшие байты.

    Каждая команда состоит из четырёхбайтной строки, данных (если команда их предусматривает) и двухбайтного кода \
    контроля CRC если команда содержит данные. Данные могут пересылаться как из компьютера, так и контроллером. \
    Команда передаётся на обработку если она распознана и, в случае передачи данных, код CRC верный. После обработки \
    пришедшей без ошибок команды контроллер посылает в компьютер четырехбайтную строку – наименование выполненной \
    команды, затем данные, если формат команды это предусматривает, затем два байта CRC (если есть данные).

    ## Обработка ошибок на стороне контроллера

    ### Неверные команды или данные

    Если пришедшая в контроллер команда не может быть интерпретирована, как определенная команда управления, то в \
    компьютер посылается строка "errc", команда игнорируется, в данных текущего состояния контроллера выставляется бит \
    "команда не распознана". Если нераспознанная команда содержала данные, то возможно неверная интерпретация принятых \
    данных как новых команд. Необходима синхронизация.

    Если пришедшая в контроллер команда интерпретирована верно, команда предусматривала данные, они пришли, но два \
    байта CRC не соответствует полученным с ней данным, то в данных текущего состояния контроллера устанавливается \
    флаг ошибки CRC пришедших данных, в компьютер посылается строка "errd", текущая команда игнорируется. \
    Синхронизация приёма/передачи с компьютером не нужна.

    ### Расчёт CRC

    CRC рассчитывается для передаваемых данных. Четыре байта команды в расчёте не участвуют. Алгоритм CRC на языке Си:

    ```c
    const uint16_t crc16_t[] = {
      0x0000, 0xC0C1, 0xC181, 0x0140, 0xC301, 0x03C0, 0x0280, 0xC241,
      0xC601, 0x06C0, 0x0780, 0xC741, 0x0500, 0xC5C1, 0xC481, 0x0440,
      0xCC01, 0x0CC0, 0x0D80, 0xCD41, 0x0F00, 0xCFC1, 0xCE81, 0x0E40,
      0x0A00, 0xCAC1, 0xCB81, 0x0B40, 0xC901, 0x09C0, 0x0880, 0xC841,
      0xD801, 0x18C0, 0x1980, 0xD941, 0x1B00, 0xDBC1, 0xDA81, 0x1A40,
      0x1E00, 0xDEC1, 0xDF81, 0x1F40, 0xDD01, 0x1DC0, 0x1C80, 0xDC41,
      0x1400, 0xD4C1, 0xD581, 0x1540, 0xD701, 0x17C0, 0x1680, 0xD641,
      0xD201, 0x12C0, 0x1380, 0xD341, 0x1100, 0xD1C1, 0xD081, 0x1040,
      0xF001, 0x30C0, 0x3180, 0xF141, 0x3300, 0xF3C1, 0xF281, 0x3240,
      0x3600, 0xF6C1, 0xF781, 0x3740, 0xF501, 0x35C0, 0x3480, 0xF441,
      0x3C00, 0xFCC1, 0xFD81, 0x3D40, 0xFF01, 0x3FC0, 0x3E80, 0xFE41,
      0xFA01, 0x3AC0, 0x3B80, 0xFB41, 0x3900, 0xF9C1, 0xF881, 0x3840,
      0x2800, 0xE8C1, 0xE981, 0x2940, 0xEB01, 0x2BC0, 0x2A80, 0xEA41,
      0xEE01, 0x2EC0, 0x2F80, 0xEF41, 0x2D00, 0xEDC1, 0xEC81, 0x2C40,
      0xE401, 0x24C0, 0x2580, 0xE541, 0x2700, 0xE7C1, 0xE681, 0x2640,
      0x2200, 0xE2C1, 0xE381, 0x2340, 0xE101, 0x21C0, 0x2080, 0xE041,
      0xA001, 0x60C0, 0x6180, 0xA141, 0x6300, 0xA3C1, 0xA281, 0x6240,
      0x6600, 0xA6C1, 0xA781, 0x6740, 0xA501, 0x65C0, 0x6480, 0xA441,
      0x6C00, 0xACC1, 0xAD81, 0x6D40, 0xAF01, 0x6FC0, 0x6E80, 0xAE41,
      0xAA01, 0x6AC0, 0x6B80, 0xAB41, 0x6900, 0xA9C1, 0xA881, 0x6840,
      0x7800, 0xB8C1, 0xB981, 0x7940, 0xBB01, 0x7BC0, 0x7A80, 0xBA41,
      0xBE01, 0x7EC0, 0x7F80, 0xBF41, 0x7D00, 0xBDC1, 0xBC81, 0x7C40,
      0xB401, 0x74C0, 0x7580, 0xB541, 0x7700, 0xB7C1, 0xB681, 0x7640,
      0x7200, 0xB2C1, 0xB381, 0x7340, 0xB101, 0x71C0, 0x7080, 0xB041,
      0x5000, 0x90C1, 0x9181, 0x5140, 0x9301, 0x53C0, 0x5280, 0x9241,
      0x9601, 0x56C0, 0x5780, 0x9741, 0x5500, 0x95C1, 0x9481, 0x5440,
      0x9C01, 0x5CC0, 0x5D80, 0x9D41, 0x5F00, 0x9FC1, 0x9E81, 0x5E40,
      0x5A00, 0x9AC1, 0x9B81, 0x5B40, 0x9901, 0x59C0, 0x5880, 0x9841,
      0x8801, 0x48C0, 0x4980, 0x8941, 0x4B00, 0x8BC1, 0x8A81, 0x4A40,
      0x4E00, 0x8EC1, 0x8F81, 0x4F40, 0x8D01, 0x4DC0, 0x4C80, 0x8C41,
      0x4400, 0x84C1, 0x8581, 0x4540, 0x8701, 0x47C0, 0x4680, 0x8641,
      0x8201, 0x42C0, 0x4380, 0x8341, 0x4100, 0x81C1, 0x8081, 0x4040
    };

    uint16_t CRC16(uint8_t *pcBlock, uint16_t len)
    {
      uint16_t crc = 0xffff;

      while (len--)
        crc = (crc >> 8) ^ crc16_t[(crc & 0xff) ^ *pcBlock++];

      return crc;
    }
    ```

    Функция получает указатель на массив данных pbuf, длину данных в байтах n. Функция возвращает двубайтное слово \
    - код CRC.

    ### Сбои передачи

    Наиболее вероятны следующие сбои в канале связи: исчезновение байта при приёме или передаче контроллером, \
    возникновение лишнего байта при приёме или передаче контроллером и изменение принятого или посланного байта.
    Сбои происходят при нестандартных условиях и обычно не наблюдаются вообще. Регулярные сбои возможны при \
    некачественном, сломанном кабеле USB или соединительном кабеле между платами. Протокол не разрабатывался для \
    штатного применения в условиях сильно нестабильной связи. В частности в таких условиях редко возможно выполнение \
    не той команды, что была послана.

    **Исчезновение байта на стороне контроллера**

    Байт, ожидаемый, но не полученный контроллером, приводит к таймауту компьютера. Посылка команды считается \
    компьютером неуспешной. На этот момент синхронизация передачи данных будет нарушена, но восстановится по таймауту \
    (если таймаут контроллера меньше таймаута компьютера с учётом времени пересылки).

    **Исчезновение байта на стороне компьютера**

    Байт, не полученный компьютером, приводит к таймауту компьютера. Синхронизация не нарушена.

    **Возникновение байта на стороне контроллера**

    Лишний байт, возникший при приёме контроллером, приводит к получению компьютером одного или нескольких errc либо \
    errd (очень редко сочетания errc и errd). Посылка команды считается неуспешной. В приёмном буфере компьютера может \
    появиться несколько err? ответов контроллера. На этот момент синхронизация нарушена.

    **Возникновение байта на стороне компьютера**

    Байт, возникший при приёме компьютером, приводит к неверно принятой команде или неверному коду CRC. Кроме того, \
    в приёмном буфере останется лишний байт. На этот момент синхронизация нарушена.

    **Изменение байта на стороне контроллера**

    Байт, изменившийся при приёме контроллером, приводит к получению компьютером одного или нескольких errc либо errd \
    (очень редко сочетания errc и errd). Посылка команды считается неуспешной. В приёмном буфере компьютера может \
    появиться несколько err? ответов контроллера. Обычно синхронизация не нарушается, но редко она может быть нарушена.

    **Изменение байта на стороне компьютера**

    Байт, изменившийся при приёме компьютером, приводит к неверно принятой команде или неверному коду CRC. На этот \
    момент синхронизация не нарушена.

    ### Восстановление синхронизации методом таймаута

    Если при получении пакета, время между получением одного или нескольких байт выходит за рамки таймаута, то \
    полученные данные игнорируются, входной буфер очищается. Время таймаута контроллера должно быть меньше таймаута \
    компьютера с учетом погрешности на время пересылки.

    ### Восстановление синхронизации методом очистительных нулей

    Ни одна команда не начинается нулём ('\0'). Поэтому возможен такой метод синхронизации: контроллер на каждый \
    полученный первый байт команды равный нулю отвечает нулём, а компьютер игнорирует первые байт ответа если он \
    равен нулю и переходит к рассмотрению следующего. Тогда в случая когда синхронизация нарушена на стороне \
    компьютера или контроллера, но еще не прошло время таймаута контроллера, возможен следующий алгоритм:
    Если компьютером в ответ на переданную команду с данными или без, получен от контроллера ответ не на ту команду, \
    errc или errd, то с компьютера в контроллер средствами библиотеки посылается от 4 до 250 нулей (ограничение в \
    250 байт связано с длиной приёмного буфера и протоколом передачи данных по I2C, а передача менее 4 нулей часто \
    не приведёт к восстановлению синхронизации). При этом происходит постоянное считывание приходящих байт от \
    контроллера до появления первого нуля. После этого и считывание и посылка прекращаются.

    Принятый нуль обычно не является частью предыдущей передачи, так как в моменты ошибок контроллер получает ответы \
    errc/errd. В редких случаях (особое изменение байта на стороне контроллера) возможен приём лишнего мусора. \
    Если мусор содержит нуль, то синхронизация пока не восстановилась, но снова пойдут сбои, которые повторно вызовут \
    очистительные нули и синхронизация восстановится с некоторой попытки. Таким образом, приход первого нуля обычно \
    означает, что приёмный буфер контроллера чист и уже не заполнится, пока не придёт первая значимая команда. \
    Сразу после прихода первого нуля от контроллера компьютер готов передавать следующую команду. Остальные нули, \
    находящиеся в пересылке, будут проигнорированы, так как придут до ответа контроллера.
    Синхронизация завершена.

    ## Обработка ошибок на стороне библиотеки

    Практически каждая функция библиотеки возвращает статус выполнения типа `result_t`.
    После посылки запроса контроллеру библиотека проверяет первые приходящие байты пока не встретит первое ненулевое \
    значение. Все нулевые байты игнорируются. Остальные приходящие байты считаются значимыми. Библиотека ожидает \
    первые 4 байта ответа. Далее она сравнивает их с кодом запроса и, при необходимости, ожидает остальные байты \
    пакета данных. Если полученные 4 байта не соответствуют запросу, то запускается процедура синхронизации \
    очистительными нулями, команда выполнена неуспешно. Если полученные первые 4 байта совпадают с кодом запроса и в \
    ответе есть еще данные, то после их получения проверяется CRC код. Если код неверный, то запускается \
    синхронизация очистительными нулями, выполнение команды считается неуспешным.

    Если сработал таймаут при ожидании ответа контроллера, то запускается процедура синхронизации очистительными \
    нулями, выполнение команды считается неуспешным.

    Если ошибок не обнаружено, то команда считается выполненной успешно и возвращается result_ok.

    ### Возможные значения ответа библиотеки

    * `result_ok`. Ошибок нет.
    * `result_error`. Общая ошибка. Может быть связана с аппаратными проблемами, отсутствием данных в буфере порта, \
    превышением таймаутов. Также может означать сбой синхронизации, который был устранён. Такой сбой мог быть вызван \
    помехами на линии связи с контроллером. Еще одной причиной может быть несоответствие протоколов в прошивке \
    и в контроллере.
    * `result_nodevice`. Невозможность открытия устройства, потеря связи с ним в процессе передачи данных, неудачная \
    синхронизация. Требуется повторное открытие устройства или вмешательство пользователя.

    Если функция возвращает ошибку, любые переданные в неё структуры для записи считаются неопределёнными.
    Возврат кода ошибки может сопровождаться записью подробного сообщения в системный лог на unix или в stderr на \
    windows.

    ### Процедура синхронизации очистительными нулями

    Восстановление синхронизации осуществляется посылкой нулевых байтов и считывания принимаемых байт до появления \
    первого нулевого значения ('\\0'). Опционально можно в конце синхронизации очистить буфер порта. \
    Посылается изначально 64 нулевых байта. Если от контроллера не пришло ни одного нулевого байта за время таймаута, \
    то 64 байта посылаются еще 3 раза. После 4 посылки и неполучения нулевого байта устройство считается потерянным и \
    библиотека должна вернуть код ошибки result_nodevice. В случае удачной синхронизации возвращаемый код ошибки \
    result_error.

    ##  Описание команд
    """)
    return s.replace("    ", "")

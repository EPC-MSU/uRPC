//=============================================================================
//
// file :        main.cpp
//
// description : C++ source for the Standa8smc4usb device server main.
//               The main rule is to initialise (and create) the Tango
//               system and to create the DServerClass singleton.
//               The main should be the same for every Tango device server.
//
// project :     StandaTango
//
// This file is part of Tango device class.
// 
// Tango is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// Tango is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
// 
// You should have received a copy of the GNU General Public License
// along with Tango.  If not, see <http://www.gnu.org/licenses/>.
// 
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// $HeadURL:  $
//
//=============================================================================
//                This file is generated by POGO
//        (Program Obviously used to Generate tango Object)
//=============================================================================
#include <unordered_map>

#if defined (_WIN32)
    #include <tango.h>	
#else
    #pragma GCC diagnostic push
    #pragma GCC diagnostic ignored "-Wunused-variable"
    #include <tango.h>
    #pragma GCC diagnostic pop
#endif

#include "${device_name(protocol)}Config.h"


// TODO: Refactor to separate file
int ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argc;
char **${device_name(protocol)}_internal_ns::${device_name(protocol)}_argv;

char *${device_name(protocol)}_internal_ns::${device_name(protocol)}_server_name;
char *${device_name(protocol)}_internal_ns::${device_name(protocol)}_instance_name;
char *${device_name(protocol)}_internal_ns::${device_name(protocol)}_class_name;

bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reactive_enabled;
bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reinit_by_readers_enabled;

bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_pollers;
bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_cmd;
bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_ar;
bool ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_aw;


int main(int argc, char *argv[]) {
    char *real_argv[3];

    // Parse extra arguments
    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reactive_enabled = true;
    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reinit_by_readers_enabled = true;

    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_pollers = false;
    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_cmd = false;
    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_ar = false;
    ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_aw = false;

    {
        int i = 1;

        const auto arg_found =
            [&i, argv](const char *arg) -> bool
            {
                return strcmp(argv[i], arg) == 0;
            };

        const auto consume_arg =
            [&i, argv, &argc]() -> void
            {
                if (i + 1 < argc) {
                    std::move(argv + i + 1, argv + argc, argv + i);
                }
                --argc;
            };

        while (i < argc) {
            if (arg_found("--version")) {
                std::cout
                     << "Builder: " << "${BUILDER_VERSION}" << std::endl
                     << "Protocol: " << "${protocol.version}" << std::endl;
                return 0;
            } else if (arg_found("--reactive-disabled")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reactive_enabled = false;
                consume_arg();
            } else if (arg_found("--reinit-by-readers-disabled")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_reinit_by_readers_enabled = false;
                consume_arg();
            } else if (arg_found("--profile-pollers")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_pollers = true;
                consume_arg();
            } else if (arg_found("--profile-cmd")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_cmd = true;
                consume_arg();
            } else if (arg_found("--profile-ar")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_ar = true;
                consume_arg();
            } else if (arg_found("--profile-aw")) {
                ${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_aw = true;
                consume_arg();
            } else {
                ++i;
            }
        }
    }

    if (argc == 4 || (argc == 5 && strlen(argv[4]) >= 2 && argv[4][0] == '-' && argv[4][1] == 'v')) {
        ${device_name(protocol)}_internal_ns::${device_name(protocol)}_server_name = argv[1];
        ${device_name(protocol)}_internal_ns::${device_name(protocol)}_instance_name = argv[2];
        ${device_name(protocol)}_internal_ns::${device_name(protocol)}_class_name = argv[3];

        real_argv[0] = ${device_name(protocol)}_internal_ns::${device_name(protocol)}_server_name;
        real_argv[1] = ${device_name(protocol)}_internal_ns::${device_name(protocol)}_instance_name;
        if (argc == 4) {
            ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argc = 2;
        } else {
            real_argv[2] = argv[4];
            ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argc = 3;
        }

        ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argv = real_argv;
    } else {
        std::cout
            << "Usage: " << argv[0] << " SERVER_NAME INSTANCE_NAME CLASS_NAME" << std::endl
            << "        [-vN]" << std::endl
            << "        [--reactive-disabled]" << std::endl
            << "        [--reinit-by-readers-disabled]" << std::endl
            << "        [--profile-pollers]" << std::endl
            << "        [--profile-cmd]" << std::endl
            << "        [--profile-ar]" << std::endl
            << "        [--profile-aw]" << std::endl
            << "        [--version]" << std::endl;
        return 1;
    }

	const std::unordered_map<int, const char *> serial_models{
		std::make_pair(Tango::SerialModel::BY_CLASS, "BY_CLASS"),
		std::make_pair(Tango::SerialModel::BY_DEVICE, "BY_DEVICE"),
		std::make_pair(Tango::SerialModel::BY_PROCESS, "BY_PROCESS"),
		std::make_pair(Tango::SerialModel::NO_SYNC, "NO_SYNC")
	};

	try {
        std::cout << "Parameters for Tango:";
        for (int i = 0; i < ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argc; ++i) {
            std::cout << " [" << ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argv[i] << ']';
        }
        std::cout << std::endl;

		Tango::Util *tg = Tango::Util::init(
            ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argc,
            ${device_name(protocol)}_internal_ns::${device_name(protocol)}_argv
        );
		tg->server_init(false);

		const Tango::SerialModel default_serial_model = tg->get_serial_model();
		tg->set_serial_model(Tango::SerialModel::NO_SYNC);
		const Tango::SerialModel serial_model = tg->get_serial_model();

		if (serial_model == default_serial_model) {
			std::cout
				<< "Serial model: " << serial_models.at(serial_model)
				<< " (keep default)." << std::endl;
		} else {
			std::cout
				<< "Serial model: " << serial_models.at(serial_model)
				<< " (default: " << serial_models.at(default_serial_model) << ")."
                << std::endl;
		}

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_reactive_enabled) {
            std::cout
                << "Reactive: ENABLED (as default, use --reactive-disabled to disable)."
                << std::endl;
        } else {
            std::cout
                << "Reactive: DISABLED."
                << std::endl;
        }

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_reinit_by_readers_enabled) {
            std::cout
                << "Reinit by attribute readers: ENABLED (as default, use --reinit-by-readers-disabled to disable)."
                << std::endl;
        } else {
            std::cout
                << "Reinit by attribute readers: DISABLED."
                << std::endl;
        }

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_pollers) {
            std::cout
                << "Profile pollers: ENABLED."
                << std::endl;
        } else {
            std::cout
                << "Profile pollers: DISABLED (as default, use --profile-pollers with -v4 to enable)."
                << std::endl;
        }

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_cmd) {
            std::cout
                << "Profile commands: ENABLED."
                << std::endl;
        } else {
            std::cout
                << "Profile commands: DISABLED (as default, use --profile-cmd with -v4 to enable)."
                << std::endl;
        }

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_ar) {
            std::cout
                << "Profile attributes readers: ENABLED."
                << std::endl;
        } else {
            std::cout
                << "Profile attributes readers: DISABLED (as default, use --profile-ar with -v4 to enable)."
                << std::endl;
        }

        if (${device_name(protocol)}_internal_ns::${device_name(protocol)}_profile_aw) {
            std::cout
                << "Profile attributes writers: ENABLED."
                << std::endl;
        } else {
            std::cout
                << "Profile attributes writers: DISABLED (as default, use --profile-aw with -v4 to enable)."
                << std::endl;
        }

		std::cout << "Ready to accept request..." << std::endl;
		std::cout.flush();

		tg->server_run();
	} catch (const std::bad_alloc &) {
		std::cout << "Can't allocate memory to store device object. Exiting..." << std::endl;
	} catch (const CORBA::Exception &e) {
		Tango::Except::print_exception(e);
		std::cout << "Received a CORBA Exception. Exiting..." << std::endl;
	}

	Tango::Util::instance()->server_cleanup();

	return 0;
}
